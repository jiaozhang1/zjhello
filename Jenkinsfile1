pipeline {
  agent {
    label 'golang'
  }
  stages {
    stage('Checkout') {
      steps {
	      echo "测试1111"
	      echo "testv3.1~~~~~~~~~~~~"
      }
    }
    stage('CI') {
      parallel {
        stage('Build') {
          steps {
            echo "CI Build...CI Build...CI Build...CI Build...CI Build...CI Build...CI Build11..." 
          }
        }
        stage('Test1') {
          steps {
            echo "CI Test1...CI Test1...CI Test1...CI Test1...CI Test1...CI Test1..."  
          }
        }
        stage('Test2') {
          steps {
            echo "CI Test2..."  
            echo "CI Test2...LLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLL"   
          }
        }
        stage('Test4') {
          steps {
            echo "CI Test444444..."  
          }
        }
        stage('Test5') {
          steps {
            echo "CI Test5..."  
            echo "CI Test5..."  
            echo "CI Test5..."  
            echo "CI Test5..."  
            echo "CI Test5..."  
            echo "CI Test5..."  
          }
        }
        stage('Test6') {
          steps {
            echo "CI Test6..." 
          }
        }
        stage('Test7') {
          steps {
            echo "CI Test7..." 
          }
        }
        stage('Test8') {
          steps {
            echo "CI Test8..." 
          }
        }
      }
    }
    stage('CI1') {
      parallel {
        stage('Build1') {
          steps {
            echo "CI Build...CI Build...CI Build...CI Build...CI Build...CI Build...CI Build..." 
          }
        }
        stage('Test1') {
          steps {
            echo "CI Test1...CI Test1...CI Test1...CI Test1...CI Test1...CI Test1..."  
            echo "CI Test1...LLLLLLLLLLL"  
          }
        }
        stage('Test2') {
          steps {
            echo "CI Test2..."  
            echo "CI Test2...RRRRRRRRRRRR"  
            echo "CI Test2...RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"  
            echo "CI Test2...LLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLL"   
          }
        }
        stage('Test3') {
          steps {
            echo "CI Test3..."  
            echo "CI Test3..."  
            echo "CI Test3..."  
            echo "CI Test3..."  
            echo "CI Test3..."  
            echo "CI Test3..."  
          }
        }
      }
    }
    stage('Deploy1') {
      steps {
        echo "Deploy1..."
        echo "Deploy1...Deploy1...Deploy1..."
        echo "Deploy1...Deploy1...Deploy1..."
      }
    }
    stage('Deploy2') {
      steps {
        echo "Deploy2..."
      }
    }
    stage('Deploy3') {
      steps {
        echo "Deploy3..."
      }
    }
    stage('Deploy4') {
      steps {
        echo "Deploy4..."
      }
    }
    stage('sonar') {
      steps {
        container('tools') {
          script {
            env.CODE_QUALITY_BINDING_NAME = "sonarbind"
            env.CODE_QUALITY_BINDING_NAMESPACE = "zjproject"
            env.CODE_REPOSITORY_KEY = "https://github.com/jiaozhang1/zjhello".replace("http://", "").replace("https://", "").replaceAll("/", "-")
            env.CODE_REPOSITORY_NAME = "${CODE_REPOSITORY_KEY}"
            env.BRANCH = "*/master"
            if (env.BRANCH.equals("*/master")) {
              env.BRANCH = "master"
            }

            if (fileExists('sonar-project.properties')) {
              env.ANALYSIS_PARAMETERS = ""
            } else {
              env.ANALYSIS_PARAMETERS = """sonar.sources=.""".replaceAll("\r\n"," ").replaceAll("\n", " ").replaceAll("sonar", "-D sonar")
            }

            env.ANALYSIS_PARAMETERS = env.ANALYSIS_PARAMETERS + " -D sonar.branch.name=${BRANCH}"

            alaudaDevops.withBindInProjectSonarEnv("${CODE_QUALITY_BINDING_NAMESPACE}", "${CODE_QUALITY_BINDING_NAME}"){
              sh "#!/bin/sh -e\n" + "sonar-scanner -D sonar.host.url=${SONAR_SERVER_URL} -D sonar.login=${SONAR_TOKEN} -D sonar.projectName=${CODE_REPOSITORY_NAME} -D sonar.projectKey=${CODE_REPOSITORY_KEY} ${ANALYSIS_PARAMETERS}"

              timeout(time: 1, unit: 'HOURS') {
                def statusCode = sh script: "#!/bin/sh -e\n" + "cmdclient taskmonitor --host=${SONAR_SERVER_URL} --token=${SONAR_TOKEN}", returnStatus:true

                // status codes come from bergamot cmdclient - https://github.com/alauda/bergamot/blob/master/sonarqube/cmdclient/cmd/task_monitor.go
                def QUALITY_GATE_SUCCESS = 0
                def QUALITY_GATE_WARN = 134
                def QUALITY_GATE_ERROR = 133
                def QUALITY_GATE_UNKNOW = 135

                def projectLink = "${SONAR_SERVER_URL}"
                if (!projectLink.endsWith("/")) {
                  projectLink = projectLink + "/"
                }

                projectLink = projectLink + "dashboard?id=${CODE_REPOSITORY_KEY}"

                switch(statusCode) {
                  case QUALITY_GATE_SUCCESS:
                  sh "echo \"Quality Gate Status of Project ${CODE_REPOSITORY_NAME} is OK\""
                  addBadge icon: 'green.gif', text: 'OK', id: 'QualityGate', link: projectLink
                  break
                  case QUALITY_GATE_WARN:
                  sh "echo \"Quality Gate Status of Project ${CODE_REPOSITORY_NAME} is WARN\""
                  addBadge icon: 'yellow.gif', text: 'WARN', id: 'QualityGate', link: projectLink
                  break
                  case QUALITY_GATE_ERROR:
                  sh "echo \"Quality Gate Status of Project ${CODE_REPOSITORY_NAME} is ERROR\""
                  addBadge icon: 'red.gif', text: 'ERROR', id: 'QualityGate', link: projectLink

                  break
                  default:
                  sh "echo \"Quality Gate Status of Project ${CODE_REPOSITORY_NAME} is UNKOWN\""
                  break
                }
              }
            }
          }

        }

      }
    }
    stage('Deploy666') {
      steps {
        echo "Deploy666..."
      }
    }
  }
}
